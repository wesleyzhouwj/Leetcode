/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

class Solution {
    int count = 0;
    public int countUnivalSubtrees(TreeNode root) {
        if(root == null)return 0;
        postOrder(root);
        return count;
    }
    private boolean postOrder(TreeNode node){
        if(node == null)return true;
        if(node.left == null && node.right == null){
            count++;
            return true;
        }
        
        boolean left = postOrder(node.left);
        boolean right = postOrder(node.right);
        
        int leftVal = node.left == null ? node.val : node.left.val;
        int rightVal = node.right == null ? node.val : node.right.val;
            
        if(left && right && leftVal == node.val && rightVal == node.val){
            count++;
            return true;
        }
        
        
        // if(node.left != null && node.right != null &&  node.left.val== node.val && node.right.val == node.val && left && right){
        //     count++;
        //     return true;
        // }
        // if((node.left == null && node.right.val == node.val && right) || (node.right == null && node.left.val == node.val && left)){
        //     count++;
        //     return true;
        // }

        return false;
    }
}
