/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        List<Interval>res = new ArrayList<>();
        if(intervals.size() == 0)return res;
        Collections.sort(intervals,new Comparator<Interval>(){
           public int compare(Interval a, Interval b){
               return a.start - b.start;
           } 
        });
        int startPos = intervals.get(0).start;
        int endPos = intervals.get(0).end;
        
        // List<Interval>res = new ArrayList<>();
        if(intervals.size() == 1)res.add(new Interval(startPos,endPos));
        for(int i=1;i< intervals.size();i++){
            if(intervals.get(i).start <= endPos){
                endPos = Math.max(intervals.get(i).end,endPos);
            }else{
                Interval cur = new Interval(startPos,endPos);
                res.add(cur);
                startPos = intervals.get(i).start;
                endPos = intervals.get(i).end;
            }
            if(i == intervals.size()-1){
                res.add(new Interval(startPos,endPos));
            }
        }
        
        return res;
    }
}
