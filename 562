class Solution {
    public int longestLine(int[][] M) {   //O(MN),Dp方法做
        int m = M.length;
        int n = M[0].length;
        int[][][] dp = new int[m][n][4];
        int res = 0;
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(M[i][j] == 0)continue;
                for(int k=0;k<4;k++){
                    dp[i][j][k] = 1;
                }
                // horizontal
                if(j > 0){
                    dp[i][j][0] += dp[i][j-1][0];
                }
                // vertical
                if(i > 0){
                    dp[i][j][1] += dp[i-1][j][1];
                }
                //diagonal
                if(i < m-1 && j < n){
                    dp[i][j][2] += dp[i+1][j-1][2];
                }
                //anti-diagonal
                if(i >0 && j>0 ){
                    dp[i][j][3] += dp[i-1][j-1][3];
                }
                res = Math.max(res, Math.max(dp[i][j][0], dp[i][j][1]));
                res = Math.max(res, Math.max(dp[i][j][2], dp[i][j][3]));
            }
        }
        return res;
    }
}
